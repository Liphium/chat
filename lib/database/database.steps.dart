import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    conversation,
    message,
    member,
    setting,
    friend,
    request,
    unknownProfile,
    profile,
    trustedLink,
    libraryEntry,
  ];
  late final Shape0 conversation = Shape0(
      source: i0.VersionedTable(
        entityName: 'conversation',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 message = Shape1(
      source: i0.VersionedTable(
        entityName: 'message',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_9,
          _column_10,
          _column_2,
          _column_11,
          _column_12,
          _column_13,
          _column_14,
          _column_15,
          _column_16,
          _column_17,
          _column_18,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 member = Shape2(
      source: i0.VersionedTable(
        entityName: 'member',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_19,
          _column_20,
          _column_21,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 setting = Shape3(
      source: i0.VersionedTable(
        entityName: 'setting',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY("key")',
        ],
        columns: [
          _column_5,
          _column_22,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 friend = Shape4(
      source: i0.VersionedTable(
        entityName: 'friend',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_23,
          _column_24,
          _column_1,
          _column_25,
          _column_7,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 request = Shape5(
      source: i0.VersionedTable(
        entityName: 'request',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_23,
          _column_24,
          _column_26,
          _column_1,
          _column_25,
          _column_7,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape6 unknownProfile = Shape6(
      source: i0.VersionedTable(
        entityName: 'unknown_profile',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_23,
          _column_24,
          _column_25,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape7 profile = Shape7(
      source: i0.VersionedTable(
        entityName: 'profile',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_27,
          _column_3,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape8 trustedLink = Shape8(
      source: i0.VersionedTable(
        entityName: 'trusted_link',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(domain)',
        ],
        columns: [
          _column_28,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape9 libraryEntry = Shape9(
      source: i0.VersionedTable(
        entityName: 'library_entry',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_2,
          _column_16,
          _column_3,
          _column_29,
          _column_30,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get vaultId =>
      columnsByName['vault_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get type =>
      columnsByName['type']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get data =>
      columnsByName['data']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get token =>
      columnsByName['token']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get key =>
      columnsByName['key']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<BigInt> get lastVersion =>
      columnsByName['last_version']! as i1.GeneratedColumn<BigInt>;
  i1.GeneratedColumn<BigInt> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<BigInt>;
  i1.GeneratedColumn<BigInt> get readAt =>
      columnsByName['read_at']! as i1.GeneratedColumn<BigInt>;
}

i1.GeneratedColumn<String> _column_0(String aliasedName) =>
    i1.GeneratedColumn<String>('id', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>('vault_id', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_2(String aliasedName) =>
    i1.GeneratedColumn<int>('type', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>('data', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>('token', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>('key', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<BigInt> _column_6(String aliasedName) =>
    i1.GeneratedColumn<BigInt>('last_version', aliasedName, false,
        type: i1.DriftSqlType.bigInt);
i1.GeneratedColumn<BigInt> _column_7(String aliasedName) =>
    i1.GeneratedColumn<BigInt>('updated_at', aliasedName, false,
        type: i1.DriftSqlType.bigInt);
i1.GeneratedColumn<BigInt> _column_8(String aliasedName) =>
    i1.GeneratedColumn<BigInt>('read_at', aliasedName, false,
        type: i1.DriftSqlType.bigInt);

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get verified =>
      columnsByName['verified']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get system =>
      columnsByName['system']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<int> get type =>
      columnsByName['type']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get content =>
      columnsByName['content']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get attachments =>
      columnsByName['attachments']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get senderToken =>
      columnsByName['sender_token']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get senderAddress =>
      columnsByName['sender_address']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get answer =>
      columnsByName['answer']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<BigInt> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<BigInt>;
  i1.GeneratedColumn<String> get conversationId =>
      columnsByName['conversation_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get edited =>
      columnsByName['edited']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<bool> _column_9(String aliasedName) =>
    i1.GeneratedColumn<bool>('verified', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("verified" IN (0, 1))'));
i1.GeneratedColumn<bool> _column_10(String aliasedName) =>
    i1.GeneratedColumn<bool>('system', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("system" IN (0, 1))'));
i1.GeneratedColumn<String> _column_11(String aliasedName) =>
    i1.GeneratedColumn<String>('content', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_12(String aliasedName) =>
    i1.GeneratedColumn<String>('attachments', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_13(String aliasedName) =>
    i1.GeneratedColumn<String>('sender_token', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_14(String aliasedName) =>
    i1.GeneratedColumn<String>('sender_address', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_15(String aliasedName) =>
    i1.GeneratedColumn<String>('answer', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<BigInt> _column_16(String aliasedName) =>
    i1.GeneratedColumn<BigInt>('created_at', aliasedName, false,
        type: i1.DriftSqlType.bigInt);
i1.GeneratedColumn<String> _column_17(String aliasedName) =>
    i1.GeneratedColumn<String>('conversation_id', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<bool> _column_18(String aliasedName) =>
    i1.GeneratedColumn<bool>('edited', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("edited" IN (0, 1))'));

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get conversationId =>
      columnsByName['conversation_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get accountId =>
      columnsByName['account_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get roleId =>
      columnsByName['role_id']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_19(String aliasedName) =>
    i1.GeneratedColumn<String>('conversation_id', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_20(String aliasedName) =>
    i1.GeneratedColumn<String>('account_id', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_21(String aliasedName) =>
    i1.GeneratedColumn<int>('role_id', aliasedName, false,
        type: i1.DriftSqlType.int);

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get key =>
      columnsByName['key']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get value =>
      columnsByName['value']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_22(String aliasedName) =>
    i1.GeneratedColumn<String>('value', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get displayName =>
      columnsByName['display_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get vaultId =>
      columnsByName['vault_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get keys =>
      columnsByName['keys']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<BigInt> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<BigInt>;
}

i1.GeneratedColumn<String> _column_23(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_24(String aliasedName) =>
    i1.GeneratedColumn<String>('display_name', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_25(String aliasedName) =>
    i1.GeneratedColumn<String>('keys', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape5 extends i0.VersionedTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get displayName =>
      columnsByName['display_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get self =>
      columnsByName['self']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get vaultId =>
      columnsByName['vault_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get keys =>
      columnsByName['keys']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<BigInt> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<BigInt>;
}

i1.GeneratedColumn<bool> _column_26(String aliasedName) =>
    i1.GeneratedColumn<bool>('self', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('CHECK ("self" IN (0, 1))'));

class Shape6 extends i0.VersionedTable {
  Shape6({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get displayName =>
      columnsByName['display_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get keys =>
      columnsByName['keys']! as i1.GeneratedColumn<String>;
}

class Shape7 extends i0.VersionedTable {
  Shape7({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get pictureContainer =>
      columnsByName['picture_container']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get data =>
      columnsByName['data']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_27(String aliasedName) =>
    i1.GeneratedColumn<String>('picture_container', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape8 extends i0.VersionedTable {
  Shape8({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get domain =>
      columnsByName['domain']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_28(String aliasedName) =>
    i1.GeneratedColumn<String>('domain', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape9 extends i0.VersionedTable {
  Shape9({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get type =>
      columnsByName['type']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<BigInt> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<BigInt>;
  i1.GeneratedColumn<String> get data =>
      columnsByName['data']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get width =>
      columnsByName['width']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get height =>
      columnsByName['height']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_29(String aliasedName) =>
    i1.GeneratedColumn<int>('width', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_30(String aliasedName) =>
    i1.GeneratedColumn<int>('height', aliasedName, false,
        type: i1.DriftSqlType.int);
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from1To2: from1To2,
    ));
