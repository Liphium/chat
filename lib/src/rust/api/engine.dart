// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<LightwireEngine> createLightwireEngine() =>
    RustLib.instance.api.crateApiEngineCreateLightwireEngine();

Stream<(Uint8List, bool)> startPacketStream(
        {required LightwireEngine engine}) =>
    RustLib.instance.api.crateApiEngineStartPacketStream(engine: engine);

Future<void> setVoiceEnabled(
        {required LightwireEngine engine, required bool enabled}) =>
    RustLib.instance.api
        .crateApiEngineSetVoiceEnabled(engine: engine, enabled: enabled);

Future<void> setActivityDetection(
        {required LightwireEngine engine, required bool enabled}) =>
    RustLib.instance.api
        .crateApiEngineSetActivityDetection(engine: engine, enabled: enabled);

Future<void> setAutomaticDetection(
        {required LightwireEngine engine, required bool enabled}) =>
    RustLib.instance.api
        .crateApiEngineSetAutomaticDetection(engine: engine, enabled: enabled);

Future<void> setTalkingAmplitude(
        {required LightwireEngine engine, required double amplitude}) =>
    RustLib.instance.api.crateApiEngineSetTalkingAmplitude(
        engine: engine, amplitude: amplitude);

Future<void> registerTarget(
        {required LightwireEngine engine, required String id}) =>
    RustLib.instance.api.crateApiEngineRegisterTarget(engine: engine, id: id);

Future<void> handlePacket(
        {required LightwireEngine engine,
        required String id,
        required List<int> packet}) =>
    RustLib.instance.api
        .crateApiEngineHandlePacket(engine: engine, id: id, packet: packet);

Future<void> stopEngine({required LightwireEngine engine}) =>
    RustLib.instance.api.crateApiEngineStopEngine(engine: engine);

Future<void> stopAllEngines() =>
    RustLib.instance.api.crateApiEngineStopAllEngines();

class LightwireEngine {
  final int id;

  const LightwireEngine({
    required this.id,
  });

  @override
  int get hashCode => id.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is LightwireEngine &&
          runtimeType == other.runtimeType &&
          id == other.id;
}
