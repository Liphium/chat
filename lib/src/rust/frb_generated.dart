// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/audio_devices.dart';
import 'api/encryption.dart';
import 'api/engine.dart';
import 'api/general.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => -1690734846;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'libspaceship',
        ioDirectory: 'libspaceship/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<LightwireEngine> crateApiEngineCreateLightwireEngine();

  Stream<String> crateApiGeneralCreateLogStream();

  Future<PublicKey?> crateApiEncryptionDecodePublicKey({
    required List<int> data,
  });

  Future<SecretKey?> crateApiEncryptionDecodeSecretKey({
    required List<int> data,
  });

  Future<SigningKey?> crateApiEncryptionDecodeSigningKey({
    required List<int> data,
  });

  Future<SymmetricKey?> crateApiEncryptionDecodeSymmetricKey({
    required List<int> data,
  });

  Future<VerifyingKey?> crateApiEncryptionDecodeVerifyingKey({
    required List<int> data,
  });

  Future<Uint8List?> crateApiEncryptionDecryptAsymmetricContainer({
    required SecretKey secretKey,
    required VerifyingKey verifyingKey,
    required List<int> ciphertext,
    Uint8List? salt,
  });

  Future<Uint8List?> crateApiEncryptionDecryptSymmetric({
    required SymmetricKey key,
    required List<int> ciphertext,
  });

  Future<Uint8List?> crateApiEncryptionDecryptSymmetricContainer({
    required SymmetricKey key,
    required VerifyingKey verifyingKey,
    required List<int> ciphertext,
    Uint8List? salt,
  });

  Future<Uint8List?> crateApiEncryptionEncodeAndDropPublicKey({
    required PublicKey key,
  });

  Future<Uint8List?> crateApiEncryptionEncodeAndDropSecretKey({
    required SecretKey key,
  });

  Future<Uint8List?> crateApiEncryptionEncodeAndDropSigningKey({
    required SigningKey key,
  });

  Future<Uint8List?> crateApiEncryptionEncodeAndDropSymmetricKey({
    required SymmetricKey key,
  });

  Future<Uint8List?> crateApiEncryptionEncodeAndDropVerifyingKey({
    required VerifyingKey key,
  });

  Future<Uint8List?> crateApiEncryptionEncodePublicKey({
    required PublicKey key,
  });

  Future<Uint8List?> crateApiEncryptionEncodeSecretKey({
    required SecretKey key,
  });

  Future<Uint8List?> crateApiEncryptionEncodeSigningKey({
    required SigningKey key,
  });

  Future<Uint8List?> crateApiEncryptionEncodeSymmetricKey({
    required SymmetricKey key,
  });

  Future<Uint8List?> crateApiEncryptionEncodeVerifyingKey({
    required VerifyingKey key,
  });

  Future<Uint8List?> crateApiEncryptionEncryptAsymmetricContainer({
    required PublicKey publicKey,
    required SigningKey signingKey,
    required List<int> message,
    Uint8List? salt,
  });

  Future<Uint8List?> crateApiEncryptionEncryptSymmetric({
    required SymmetricKey key,
    required List<int> message,
  });

  Future<Uint8List?> crateApiEncryptionEncryptSymmetricContainer({
    required SymmetricKey key,
    required SigningKey signingKey,
    required List<int> message,
    Uint8List? salt,
  });

  Future<AsymmetricKeyPair> crateApiEncryptionGenerateAsymmetricKeypair();

  Future<SignatureKeyPair> crateApiEncryptionGenerateSignatureKeypair();

  Future<SymmetricKey> crateApiEncryptionGenerateSymmetricKey();

  Future<AudioInputDevice> crateApiAudioDevicesGetDefaultInputDevice();

  Future<AudioOuputDevice> crateApiAudioDevicesGetDefaultOutputDevice();

  Future<List<AudioInputDevice>> crateApiAudioDevicesGetInputDevices();

  Future<List<AudioOuputDevice>> crateApiAudioDevicesGetOutputDevices();

  Future<void> crateApiEngineHandlePacket({
    required LightwireEngine engine,
    required String id,
    required List<int> packet,
  });

  Future<void> crateApiEngineSetActivityDetection({
    required LightwireEngine engine,
    required bool enabled,
  });

  Future<void> crateApiEngineSetAudioEnabled({
    required LightwireEngine engine,
    required bool enabled,
  });

  Future<void> crateApiEngineSetAutomaticDetection({
    required LightwireEngine engine,
    required bool enabled,
  });

  Future<void> crateApiEngineSetEncodingBitrate({
    required LightwireEngine engine,
    required bool auto,
    required bool max,
    required int bitrate,
  });

  Future<void> crateApiEngineSetInputDevice({
    required LightwireEngine engine,
    required String device,
  });

  Future<void> crateApiEngineSetOutputDevice({
    required LightwireEngine engine,
    required String device,
  });

  Future<void> crateApiEngineSetTalkingAmplitude({
    required LightwireEngine engine,
    required double amplitude,
  });

  Future<void> crateApiEngineSetVoiceEnabled({
    required LightwireEngine engine,
    required bool enabled,
  });

  Stream<(Uint8List?, double?, bool?)> crateApiEngineStartPacketStream({
    required LightwireEngine engine,
  });

  Future<void> crateApiEngineStopAllEngines();

  Future<void> crateApiEngineStopEngine({required LightwireEngine engine});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<LightwireEngine> crateApiEngineCreateLightwireEngine() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_lightwire_engine,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEngineCreateLightwireEngineConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEngineCreateLightwireEngineConstMeta =>
      const TaskConstMeta(debugName: "create_lightwire_engine", argNames: []);

  @override
  Stream<String> crateApiGeneralCreateLogStream() {
    final sink = RustStreamSink<String>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_String_Sse(sink, serializer);
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 2,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiGeneralCreateLogStreamConstMeta,
          argValues: [sink],
          apiImpl: this,
        ),
      ),
    );
    return sink.stream;
  }

  TaskConstMeta get kCrateApiGeneralCreateLogStreamConstMeta =>
      const TaskConstMeta(debugName: "create_log_stream", argNames: ["sink"]);

  @override
  Future<PublicKey?> crateApiEncryptionDecodePublicKey({
    required List<int> data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(data, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_public_key,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionDecodePublicKeyConstMeta,
        argValues: [data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionDecodePublicKeyConstMeta =>
      const TaskConstMeta(debugName: "decode_public_key", argNames: ["data"]);

  @override
  Future<SecretKey?> crateApiEncryptionDecodeSecretKey({
    required List<int> data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(data, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_secret_key,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionDecodeSecretKeyConstMeta,
        argValues: [data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionDecodeSecretKeyConstMeta =>
      const TaskConstMeta(debugName: "decode_secret_key", argNames: ["data"]);

  @override
  Future<SigningKey?> crateApiEncryptionDecodeSigningKey({
    required List<int> data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(data, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_signing_key,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionDecodeSigningKeyConstMeta,
        argValues: [data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionDecodeSigningKeyConstMeta =>
      const TaskConstMeta(debugName: "decode_signing_key", argNames: ["data"]);

  @override
  Future<SymmetricKey?> crateApiEncryptionDecodeSymmetricKey({
    required List<int> data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(data, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_symmetric_key,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionDecodeSymmetricKeyConstMeta,
        argValues: [data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionDecodeSymmetricKeyConstMeta =>
      const TaskConstMeta(
        debugName: "decode_symmetric_key",
        argNames: ["data"],
      );

  @override
  Future<VerifyingKey?> crateApiEncryptionDecodeVerifyingKey({
    required List<int> data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(data, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_verifying_key,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionDecodeVerifyingKeyConstMeta,
        argValues: [data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionDecodeVerifyingKeyConstMeta =>
      const TaskConstMeta(
        debugName: "decode_verifying_key",
        argNames: ["data"],
      );

  @override
  Future<Uint8List?> crateApiEncryptionDecryptAsymmetricContainer({
    required SecretKey secretKey,
    required VerifyingKey verifyingKey,
    required List<int> ciphertext,
    Uint8List? salt,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_secret_key(secretKey, serializer);
          sse_encode_box_autoadd_verifying_key(verifyingKey, serializer);
          sse_encode_list_prim_u_8_loose(ciphertext, serializer);
          sse_encode_opt_list_prim_u_8_strict(salt, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionDecryptAsymmetricContainerConstMeta,
        argValues: [secretKey, verifyingKey, ciphertext, salt],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionDecryptAsymmetricContainerConstMeta =>
      const TaskConstMeta(
        debugName: "decrypt_asymmetric_container",
        argNames: ["secretKey", "verifyingKey", "ciphertext", "salt"],
      );

  @override
  Future<Uint8List?> crateApiEncryptionDecryptSymmetric({
    required SymmetricKey key,
    required List<int> ciphertext,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_symmetric_key(key, serializer);
          sse_encode_list_prim_u_8_loose(ciphertext, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionDecryptSymmetricConstMeta,
        argValues: [key, ciphertext],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionDecryptSymmetricConstMeta =>
      const TaskConstMeta(
        debugName: "decrypt_symmetric",
        argNames: ["key", "ciphertext"],
      );

  @override
  Future<Uint8List?> crateApiEncryptionDecryptSymmetricContainer({
    required SymmetricKey key,
    required VerifyingKey verifyingKey,
    required List<int> ciphertext,
    Uint8List? salt,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_symmetric_key(key, serializer);
          sse_encode_box_autoadd_verifying_key(verifyingKey, serializer);
          sse_encode_list_prim_u_8_loose(ciphertext, serializer);
          sse_encode_opt_list_prim_u_8_strict(salt, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionDecryptSymmetricContainerConstMeta,
        argValues: [key, verifyingKey, ciphertext, salt],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionDecryptSymmetricContainerConstMeta =>
      const TaskConstMeta(
        debugName: "decrypt_symmetric_container",
        argNames: ["key", "verifyingKey", "ciphertext", "salt"],
      );

  @override
  Future<Uint8List?> crateApiEncryptionEncodeAndDropPublicKey({
    required PublicKey key,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_public_key(key, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionEncodeAndDropPublicKeyConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionEncodeAndDropPublicKeyConstMeta =>
      const TaskConstMeta(
        debugName: "encode_and_drop_public_key",
        argNames: ["key"],
      );

  @override
  Future<Uint8List?> crateApiEncryptionEncodeAndDropSecretKey({
    required SecretKey key,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_secret_key(key, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionEncodeAndDropSecretKeyConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionEncodeAndDropSecretKeyConstMeta =>
      const TaskConstMeta(
        debugName: "encode_and_drop_secret_key",
        argNames: ["key"],
      );

  @override
  Future<Uint8List?> crateApiEncryptionEncodeAndDropSigningKey({
    required SigningKey key,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_signing_key(key, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionEncodeAndDropSigningKeyConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionEncodeAndDropSigningKeyConstMeta =>
      const TaskConstMeta(
        debugName: "encode_and_drop_signing_key",
        argNames: ["key"],
      );

  @override
  Future<Uint8List?> crateApiEncryptionEncodeAndDropSymmetricKey({
    required SymmetricKey key,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_symmetric_key(key, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionEncodeAndDropSymmetricKeyConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionEncodeAndDropSymmetricKeyConstMeta =>
      const TaskConstMeta(
        debugName: "encode_and_drop_symmetric_key",
        argNames: ["key"],
      );

  @override
  Future<Uint8List?> crateApiEncryptionEncodeAndDropVerifyingKey({
    required VerifyingKey key,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_verifying_key(key, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionEncodeAndDropVerifyingKeyConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionEncodeAndDropVerifyingKeyConstMeta =>
      const TaskConstMeta(
        debugName: "encode_and_drop_verifying_key",
        argNames: ["key"],
      );

  @override
  Future<Uint8List?> crateApiEncryptionEncodePublicKey({
    required PublicKey key,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_public_key(key, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionEncodePublicKeyConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionEncodePublicKeyConstMeta =>
      const TaskConstMeta(debugName: "encode_public_key", argNames: ["key"]);

  @override
  Future<Uint8List?> crateApiEncryptionEncodeSecretKey({
    required SecretKey key,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_secret_key(key, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionEncodeSecretKeyConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionEncodeSecretKeyConstMeta =>
      const TaskConstMeta(debugName: "encode_secret_key", argNames: ["key"]);

  @override
  Future<Uint8List?> crateApiEncryptionEncodeSigningKey({
    required SigningKey key,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_signing_key(key, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionEncodeSigningKeyConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionEncodeSigningKeyConstMeta =>
      const TaskConstMeta(debugName: "encode_signing_key", argNames: ["key"]);

  @override
  Future<Uint8List?> crateApiEncryptionEncodeSymmetricKey({
    required SymmetricKey key,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_symmetric_key(key, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionEncodeSymmetricKeyConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionEncodeSymmetricKeyConstMeta =>
      const TaskConstMeta(debugName: "encode_symmetric_key", argNames: ["key"]);

  @override
  Future<Uint8List?> crateApiEncryptionEncodeVerifyingKey({
    required VerifyingKey key,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_verifying_key(key, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionEncodeVerifyingKeyConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionEncodeVerifyingKeyConstMeta =>
      const TaskConstMeta(debugName: "encode_verifying_key", argNames: ["key"]);

  @override
  Future<Uint8List?> crateApiEncryptionEncryptAsymmetricContainer({
    required PublicKey publicKey,
    required SigningKey signingKey,
    required List<int> message,
    Uint8List? salt,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_public_key(publicKey, serializer);
          sse_encode_box_autoadd_signing_key(signingKey, serializer);
          sse_encode_list_prim_u_8_loose(message, serializer);
          sse_encode_opt_list_prim_u_8_strict(salt, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionEncryptAsymmetricContainerConstMeta,
        argValues: [publicKey, signingKey, message, salt],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionEncryptAsymmetricContainerConstMeta =>
      const TaskConstMeta(
        debugName: "encrypt_asymmetric_container",
        argNames: ["publicKey", "signingKey", "message", "salt"],
      );

  @override
  Future<Uint8List?> crateApiEncryptionEncryptSymmetric({
    required SymmetricKey key,
    required List<int> message,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_symmetric_key(key, serializer);
          sse_encode_list_prim_u_8_loose(message, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionEncryptSymmetricConstMeta,
        argValues: [key, message],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionEncryptSymmetricConstMeta =>
      const TaskConstMeta(
        debugName: "encrypt_symmetric",
        argNames: ["key", "message"],
      );

  @override
  Future<Uint8List?> crateApiEncryptionEncryptSymmetricContainer({
    required SymmetricKey key,
    required SigningKey signingKey,
    required List<int> message,
    Uint8List? salt,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_symmetric_key(key, serializer);
          sse_encode_box_autoadd_signing_key(signingKey, serializer);
          sse_encode_list_prim_u_8_loose(message, serializer);
          sse_encode_opt_list_prim_u_8_strict(salt, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionEncryptSymmetricContainerConstMeta,
        argValues: [key, signingKey, message, salt],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionEncryptSymmetricContainerConstMeta =>
      const TaskConstMeta(
        debugName: "encrypt_symmetric_container",
        argNames: ["key", "signingKey", "message", "salt"],
      );

  @override
  Future<AsymmetricKeyPair> crateApiEncryptionGenerateAsymmetricKeypair() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_asymmetric_key_pair,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionGenerateAsymmetricKeypairConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionGenerateAsymmetricKeypairConstMeta =>
      const TaskConstMeta(
        debugName: "generate_asymmetric_keypair",
        argNames: [],
      );

  @override
  Future<SignatureKeyPair> crateApiEncryptionGenerateSignatureKeypair() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_signature_key_pair,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionGenerateSignatureKeypairConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionGenerateSignatureKeypairConstMeta =>
      const TaskConstMeta(
        debugName: "generate_signature_keypair",
        argNames: [],
      );

  @override
  Future<SymmetricKey> crateApiEncryptionGenerateSymmetricKey() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 26,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_symmetric_key,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptionGenerateSymmetricKeyConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptionGenerateSymmetricKeyConstMeta =>
      const TaskConstMeta(debugName: "generate_symmetric_key", argNames: []);

  @override
  Future<AudioInputDevice> crateApiAudioDevicesGetDefaultInputDevice() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_audio_input_device,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiAudioDevicesGetDefaultInputDeviceConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAudioDevicesGetDefaultInputDeviceConstMeta =>
      const TaskConstMeta(debugName: "get_default_input_device", argNames: []);

  @override
  Future<AudioOuputDevice> crateApiAudioDevicesGetDefaultOutputDevice() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 28,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_audio_ouput_device,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiAudioDevicesGetDefaultOutputDeviceConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAudioDevicesGetDefaultOutputDeviceConstMeta =>
      const TaskConstMeta(debugName: "get_default_output_device", argNames: []);

  @override
  Future<List<AudioInputDevice>> crateApiAudioDevicesGetInputDevices() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 29,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_audio_input_device,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiAudioDevicesGetInputDevicesConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAudioDevicesGetInputDevicesConstMeta =>
      const TaskConstMeta(debugName: "get_input_devices", argNames: []);

  @override
  Future<List<AudioOuputDevice>> crateApiAudioDevicesGetOutputDevices() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 30,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_audio_ouput_device,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiAudioDevicesGetOutputDevicesConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAudioDevicesGetOutputDevicesConstMeta =>
      const TaskConstMeta(debugName: "get_output_devices", argNames: []);

  @override
  Future<void> crateApiEngineHandlePacket({
    required LightwireEngine engine,
    required String id,
    required List<int> packet,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_lightwire_engine(engine, serializer);
          sse_encode_String(id, serializer);
          sse_encode_list_prim_u_8_loose(packet, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 31,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEngineHandlePacketConstMeta,
        argValues: [engine, id, packet],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEngineHandlePacketConstMeta => const TaskConstMeta(
    debugName: "handle_packet",
    argNames: ["engine", "id", "packet"],
  );

  @override
  Future<void> crateApiEngineSetActivityDetection({
    required LightwireEngine engine,
    required bool enabled,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_lightwire_engine(engine, serializer);
          sse_encode_bool(enabled, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 32,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEngineSetActivityDetectionConstMeta,
        argValues: [engine, enabled],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEngineSetActivityDetectionConstMeta =>
      const TaskConstMeta(
        debugName: "set_activity_detection",
        argNames: ["engine", "enabled"],
      );

  @override
  Future<void> crateApiEngineSetAudioEnabled({
    required LightwireEngine engine,
    required bool enabled,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_lightwire_engine(engine, serializer);
          sse_encode_bool(enabled, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 33,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEngineSetAudioEnabledConstMeta,
        argValues: [engine, enabled],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEngineSetAudioEnabledConstMeta =>
      const TaskConstMeta(
        debugName: "set_audio_enabled",
        argNames: ["engine", "enabled"],
      );

  @override
  Future<void> crateApiEngineSetAutomaticDetection({
    required LightwireEngine engine,
    required bool enabled,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_lightwire_engine(engine, serializer);
          sse_encode_bool(enabled, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 34,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEngineSetAutomaticDetectionConstMeta,
        argValues: [engine, enabled],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEngineSetAutomaticDetectionConstMeta =>
      const TaskConstMeta(
        debugName: "set_automatic_detection",
        argNames: ["engine", "enabled"],
      );

  @override
  Future<void> crateApiEngineSetEncodingBitrate({
    required LightwireEngine engine,
    required bool auto,
    required bool max,
    required int bitrate,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_lightwire_engine(engine, serializer);
          sse_encode_bool(auto, serializer);
          sse_encode_bool(max, serializer);
          sse_encode_i_32(bitrate, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 35,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEngineSetEncodingBitrateConstMeta,
        argValues: [engine, auto, max, bitrate],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEngineSetEncodingBitrateConstMeta =>
      const TaskConstMeta(
        debugName: "set_encoding_bitrate",
        argNames: ["engine", "auto", "max", "bitrate"],
      );

  @override
  Future<void> crateApiEngineSetInputDevice({
    required LightwireEngine engine,
    required String device,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_lightwire_engine(engine, serializer);
          sse_encode_String(device, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 36,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEngineSetInputDeviceConstMeta,
        argValues: [engine, device],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEngineSetInputDeviceConstMeta =>
      const TaskConstMeta(
        debugName: "set_input_device",
        argNames: ["engine", "device"],
      );

  @override
  Future<void> crateApiEngineSetOutputDevice({
    required LightwireEngine engine,
    required String device,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_lightwire_engine(engine, serializer);
          sse_encode_String(device, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 37,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEngineSetOutputDeviceConstMeta,
        argValues: [engine, device],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEngineSetOutputDeviceConstMeta =>
      const TaskConstMeta(
        debugName: "set_output_device",
        argNames: ["engine", "device"],
      );

  @override
  Future<void> crateApiEngineSetTalkingAmplitude({
    required LightwireEngine engine,
    required double amplitude,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_lightwire_engine(engine, serializer);
          sse_encode_f_32(amplitude, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 38,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEngineSetTalkingAmplitudeConstMeta,
        argValues: [engine, amplitude],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEngineSetTalkingAmplitudeConstMeta =>
      const TaskConstMeta(
        debugName: "set_talking_amplitude",
        argNames: ["engine", "amplitude"],
      );

  @override
  Future<void> crateApiEngineSetVoiceEnabled({
    required LightwireEngine engine,
    required bool enabled,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_lightwire_engine(engine, serializer);
          sse_encode_bool(enabled, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 39,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEngineSetVoiceEnabledConstMeta,
        argValues: [engine, enabled],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEngineSetVoiceEnabledConstMeta =>
      const TaskConstMeta(
        debugName: "set_voice_enabled",
        argNames: ["engine", "enabled"],
      );

  @override
  Stream<(Uint8List?, double?, bool?)> crateApiEngineStartPacketStream({
    required LightwireEngine engine,
  }) {
    final packetSink = RustStreamSink<(Uint8List?, double?, bool?)>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_box_autoadd_lightwire_engine(engine, serializer);
            sse_encode_StreamSink_record_opt_list_prim_u_8_strict_opt_box_autoadd_f_32_opt_box_autoadd_bool_Sse(
              packetSink,
              serializer,
            );
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 40,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiEngineStartPacketStreamConstMeta,
          argValues: [engine, packetSink],
          apiImpl: this,
        ),
      ),
    );
    return packetSink.stream;
  }

  TaskConstMeta get kCrateApiEngineStartPacketStreamConstMeta =>
      const TaskConstMeta(
        debugName: "start_packet_stream",
        argNames: ["engine", "packetSink"],
      );

  @override
  Future<void> crateApiEngineStopAllEngines() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 41,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEngineStopAllEnginesConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEngineStopAllEnginesConstMeta =>
      const TaskConstMeta(debugName: "stop_all_engines", argNames: []);

  @override
  Future<void> crateApiEngineStopEngine({required LightwireEngine engine}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_lightwire_engine(engine, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 42,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEngineStopEngineConstMeta,
        argValues: [engine],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEngineStopEngineConstMeta =>
      const TaskConstMeta(debugName: "stop_engine", argNames: ["engine"]);

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  RustStreamSink<String> dco_decode_StreamSink_String_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<(Uint8List?, double?, bool?)>
  dco_decode_StreamSink_record_opt_list_prim_u_8_strict_opt_box_autoadd_f_32_opt_box_autoadd_bool_Sse(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AsymmetricKeyPair dco_decode_asymmetric_key_pair(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AsymmetricKeyPair(
      publicKey: dco_decode_public_key(arr[0]),
      secretKey: dco_decode_secret_key(arr[1]),
    );
  }

  @protected
  AudioInputDevice dco_decode_audio_input_device(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AudioInputDevice(
      name: dco_decode_String(arr[0]),
      systemDefault: dco_decode_bool(arr[1]),
    );
  }

  @protected
  AudioOuputDevice dco_decode_audio_ouput_device(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AudioOuputDevice(
      name: dco_decode_String(arr[0]),
      systemDefault: dco_decode_bool(arr[1]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  double dco_decode_box_autoadd_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  LightwireEngine dco_decode_box_autoadd_lightwire_engine(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_lightwire_engine(raw);
  }

  @protected
  PublicKey dco_decode_box_autoadd_public_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_public_key(raw);
  }

  @protected
  SecretKey dco_decode_box_autoadd_secret_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_secret_key(raw);
  }

  @protected
  SigningKey dco_decode_box_autoadd_signing_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_signing_key(raw);
  }

  @protected
  SymmetricKey dco_decode_box_autoadd_symmetric_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_symmetric_key(raw);
  }

  @protected
  VerifyingKey dco_decode_box_autoadd_verifying_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_verifying_key(raw);
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  LightwireEngine dco_decode_lightwire_engine(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return LightwireEngine(id: dco_decode_u_32(arr[0]));
  }

  @protected
  List<AudioInputDevice> dco_decode_list_audio_input_device(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_audio_input_device).toList();
  }

  @protected
  List<AudioOuputDevice> dco_decode_list_audio_ouput_device(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_audio_ouput_device).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_f_32(raw);
  }

  @protected
  PublicKey? dco_decode_opt_box_autoadd_public_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_public_key(raw);
  }

  @protected
  SecretKey? dco_decode_opt_box_autoadd_secret_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_secret_key(raw);
  }

  @protected
  SigningKey? dco_decode_opt_box_autoadd_signing_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_signing_key(raw);
  }

  @protected
  SymmetricKey? dco_decode_opt_box_autoadd_symmetric_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_symmetric_key(raw);
  }

  @protected
  VerifyingKey? dco_decode_opt_box_autoadd_verifying_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_verifying_key(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  PublicKey dco_decode_public_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PublicKey(id: dco_decode_u_32(arr[0]));
  }

  @protected
  (Uint8List?, double?, bool?)
  dco_decode_record_opt_list_prim_u_8_strict_opt_box_autoadd_f_32_opt_box_autoadd_bool(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_opt_list_prim_u_8_strict(arr[0]),
      dco_decode_opt_box_autoadd_f_32(arr[1]),
      dco_decode_opt_box_autoadd_bool(arr[2]),
    );
  }

  @protected
  SecretKey dco_decode_secret_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SecretKey(id: dco_decode_u_32(arr[0]));
  }

  @protected
  SignatureKeyPair dco_decode_signature_key_pair(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SignatureKeyPair(
      signingKey: dco_decode_signing_key(arr[0]),
      verifyingKey: dco_decode_verifying_key(arr[1]),
    );
  }

  @protected
  SigningKey dco_decode_signing_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SigningKey(id: dco_decode_u_32(arr[0]));
  }

  @protected
  SymmetricKey dco_decode_symmetric_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SymmetricKey(id: dco_decode_u_32(arr[0]));
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  VerifyingKey dco_decode_verifying_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VerifyingKey(id: dco_decode_u_32(arr[0]));
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  RustStreamSink<String> sse_decode_StreamSink_String_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<(Uint8List?, double?, bool?)>
  sse_decode_StreamSink_record_opt_list_prim_u_8_strict_opt_box_autoadd_f_32_opt_box_autoadd_bool_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AsymmetricKeyPair sse_decode_asymmetric_key_pair(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_publicKey = sse_decode_public_key(deserializer);
    var var_secretKey = sse_decode_secret_key(deserializer);
    return AsymmetricKeyPair(
      publicKey: var_publicKey,
      secretKey: var_secretKey,
    );
  }

  @protected
  AudioInputDevice sse_decode_audio_input_device(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_systemDefault = sse_decode_bool(deserializer);
    return AudioInputDevice(name: var_name, systemDefault: var_systemDefault);
  }

  @protected
  AudioOuputDevice sse_decode_audio_ouput_device(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_systemDefault = sse_decode_bool(deserializer);
    return AudioOuputDevice(name: var_name, systemDefault: var_systemDefault);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  double sse_decode_box_autoadd_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_32(deserializer));
  }

  @protected
  LightwireEngine sse_decode_box_autoadd_lightwire_engine(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_lightwire_engine(deserializer));
  }

  @protected
  PublicKey sse_decode_box_autoadd_public_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_public_key(deserializer));
  }

  @protected
  SecretKey sse_decode_box_autoadd_secret_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_secret_key(deserializer));
  }

  @protected
  SigningKey sse_decode_box_autoadd_signing_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_signing_key(deserializer));
  }

  @protected
  SymmetricKey sse_decode_box_autoadd_symmetric_key(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_symmetric_key(deserializer));
  }

  @protected
  VerifyingKey sse_decode_box_autoadd_verifying_key(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_verifying_key(deserializer));
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  LightwireEngine sse_decode_lightwire_engine(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    return LightwireEngine(id: var_id);
  }

  @protected
  List<AudioInputDevice> sse_decode_list_audio_input_device(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AudioInputDevice>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_audio_input_device(deserializer));
    }
    return ans_;
  }

  @protected
  List<AudioOuputDevice> sse_decode_list_audio_ouput_device(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AudioOuputDevice>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_audio_ouput_device(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PublicKey? sse_decode_opt_box_autoadd_public_key(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_public_key(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SecretKey? sse_decode_opt_box_autoadd_secret_key(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_secret_key(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SigningKey? sse_decode_opt_box_autoadd_signing_key(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_signing_key(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SymmetricKey? sse_decode_opt_box_autoadd_symmetric_key(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_symmetric_key(deserializer));
    } else {
      return null;
    }
  }

  @protected
  VerifyingKey? sse_decode_opt_box_autoadd_verifying_key(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_verifying_key(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PublicKey sse_decode_public_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    return PublicKey(id: var_id);
  }

  @protected
  (Uint8List?, double?, bool?)
  sse_decode_record_opt_list_prim_u_8_strict_opt_box_autoadd_f_32_opt_box_autoadd_bool(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_field1 = sse_decode_opt_box_autoadd_f_32(deserializer);
    var var_field2 = sse_decode_opt_box_autoadd_bool(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  SecretKey sse_decode_secret_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    return SecretKey(id: var_id);
  }

  @protected
  SignatureKeyPair sse_decode_signature_key_pair(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_signingKey = sse_decode_signing_key(deserializer);
    var var_verifyingKey = sse_decode_verifying_key(deserializer);
    return SignatureKeyPair(
      signingKey: var_signingKey,
      verifyingKey: var_verifyingKey,
    );
  }

  @protected
  SigningKey sse_decode_signing_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    return SigningKey(id: var_id);
  }

  @protected
  SymmetricKey sse_decode_symmetric_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    return SymmetricKey(id: var_id);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  VerifyingKey sse_decode_verifying_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    return VerifyingKey(id: var_id);
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_StreamSink_String_Sse(
    RustStreamSink<String> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void
  sse_encode_StreamSink_record_opt_list_prim_u_8_strict_opt_box_autoadd_f_32_opt_box_autoadd_bool_Sse(
    RustStreamSink<(Uint8List?, double?, bool?)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_opt_list_prim_u_8_strict_opt_box_autoadd_f_32_opt_box_autoadd_bool,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_asymmetric_key_pair(
    AsymmetricKeyPair self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_public_key(self.publicKey, serializer);
    sse_encode_secret_key(self.secretKey, serializer);
  }

  @protected
  void sse_encode_audio_input_device(
    AudioInputDevice self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_bool(self.systemDefault, serializer);
  }

  @protected
  void sse_encode_audio_ouput_device(
    AudioOuputDevice self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_bool(self.systemDefault, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_lightwire_engine(
    LightwireEngine self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_lightwire_engine(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_public_key(
    PublicKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_public_key(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_secret_key(
    SecretKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_secret_key(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_signing_key(
    SigningKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_signing_key(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_symmetric_key(
    SymmetricKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_symmetric_key(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_verifying_key(
    VerifyingKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_verifying_key(self, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_lightwire_engine(
    LightwireEngine self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
  }

  @protected
  void sse_encode_list_audio_input_device(
    List<AudioInputDevice> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_audio_input_device(item, serializer);
    }
  }

  @protected
  void sse_encode_list_audio_ouput_device(
    List<AudioOuputDevice> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_audio_ouput_device(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
    List<int> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(
      self is Uint8List ? self : Uint8List.fromList(self),
    );
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_32(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_public_key(
    PublicKey? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_public_key(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_secret_key(
    SecretKey? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_secret_key(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_signing_key(
    SigningKey? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_signing_key(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_symmetric_key(
    SymmetricKey? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_symmetric_key(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_verifying_key(
    VerifyingKey? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_verifying_key(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
    Uint8List? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_public_key(PublicKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
  }

  @protected
  void
  sse_encode_record_opt_list_prim_u_8_strict_opt_box_autoadd_f_32_opt_box_autoadd_bool(
    (Uint8List?, double?, bool?) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_list_prim_u_8_strict(self.$1, serializer);
    sse_encode_opt_box_autoadd_f_32(self.$2, serializer);
    sse_encode_opt_box_autoadd_bool(self.$3, serializer);
  }

  @protected
  void sse_encode_secret_key(SecretKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
  }

  @protected
  void sse_encode_signature_key_pair(
    SignatureKeyPair self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_signing_key(self.signingKey, serializer);
    sse_encode_verifying_key(self.verifyingKey, serializer);
  }

  @protected
  void sse_encode_signing_key(SigningKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
  }

  @protected
  void sse_encode_symmetric_key(SymmetricKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_verifying_key(VerifyingKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
  }
}
